#!/usr/bin/env sh

# Library version

VERSION="0.4.0"
PREFIX=${PREFIX-/usr/local}
N_PREFIX=${N_PREFIX-/usr/local}
VERSIONS_DIR=$N_PREFIX/n/versions

#
# Log the given <msg ...>
#

log() {
  echo "\033[90m...\033[0m $@"
}

#
# Exit with the given <msg ...>
#

abort() {
  echo "\033[31mError: $@\033[0m" && exit 1
}

# setup

test -d $VERSIONS_DIR || mkdir -p $VERSIONS_DIR

if ! test -d $VERSIONS_DIR; then
  abort "Failed to create versions directory ($VERSIONS_DIR), do you have permissions to do this?"
fi

# curl / wget support

GET=

# wget support (Added --no-check-certificate for Github downloads)
which wget > /dev/null && GET="wget --no-check-certificate -q -O-"

# curl support
which curl > /dev/null && GET="curl -# -L --fail "

# Ensure we have curl or wget

test -z "$GET" && abort "curl or wget required"


#
# Output usage information.
#

display_help() {
  cat <<-help

  Usage: n [options] [COMMAND] [config] 

  Commands:

    n                           Output versions installed
    n latest [config ...]       Install or activate the latest node release
    n <version> [config ...]    Install and/or use node <version>
    n use <version> [args ...]  Execute node <version> with [args ...]
    n bin <version>             Output bin path for <version>
    n rm <version ...>          Remove the given version(s)
    n --latest                  Output the latest node version available
    n ls                        Output the versions of node available

  Options:

    -V, --version   Output current version of n
    -h, --help      Display help information

  Aliases:

    -       rm
    which   bin
    use     as
    list    ls

help
  exit 0
}

#
# Output n version.
#

display_n_version() {
  echo $VERSION && exit 0
}

#
# Check for installed version, and populate $active
#

check_current_version() {
  if test `which node`; then
    active=`node --version`
    active=${active#v}
  fi  
}

#
# If there is no n version installed and they have a node version installed
# convert their version to an n version
#

check_installed() {
  local ver=`node --version`
  ver=${ver#v}
  if test -n "$ver"; then
    log "Found version $ver of node installed, making it an n version."
    local dir=$VERSIONS_DIR/$ver
    if ! test -d $dir; then
      mkdir -p $dir
      mkdir -p $dir/bin
      mkdir -p $dir/lib/node
      mkdir -p $dir/include/node
    fi
    
    if test -d $dir/include; then
        cd $dir
        cp -fR $PREFIX/include/node $dir/include
        if [ -f "$PREFIX/bin/node-waf"]; then
            cp -f $PREFIX/bin/node-waf $dir/bin/node-waf
        fi
        cp -fr $PREFIX/lib/node/wafadmin $dir/lib/node/wafadmin
    fi

    cd $dir \
      && cp -f $PREFIX/bin/* $dir/bin/
    
    log "Converted $ver to an n version"
    display_versions
  else
    log "No node version installed, install with: n <version>"
  fi
}


#
# Display current node --version
# and others installed.
#

display_versions() {
  check_current_version
  for dir in `ls $VERSIONS_DIR/ | sort -u -k 1,1n -k 2,2n -k 3,3n -t .`; do
    local version=${dir##*/}
    local config=`test -f $dir/.config && cat $dir/.config`
    if test "$version" = "$active"; then
      echo "  \033[32mο\033[0m $version \033[90m$config\033[0m"
    else
      if test "$version" = "*"; then
        check_installed
      else
        echo "    $version \033[90m$config\033[0m"
      fi
    fi
  done
}

#
# Install node <branch (master)> [config ...]
#

install_source() {
  shift;
  local version=$1;
  local config="";
  if ! test -z "$2"; then
    shift;
    config=$@
  fi

  if test "$version" = ""; then
    version="master"
  fi

  SOURCE_URL=https://github.com/joyent/node/tarball/$version
  install_node $version $config

}

#
# Install node <version> [config ...]
#

install_node() {
  local version=$1; shift
  local config=$@
  check_current_version

  # remove "v"
  version=${version#v}

  # activate
  local dir=$VERSIONS_DIR/$version
  if test -d $dir; then
    echo "Switching to node v${version}"
    # TODO: refactor, this is lame
    if test -d $dir/include; then
        cd $dir \
          && cp -fr $dir/include/node $PREFIX/include \
          && cp -f $dir/bin/node $PREFIX/bin/node \
          && cp -f $dir/bin/npm $PREFIX/bin/npm \
          && cp -fr $dir/lib/node_modules/* $PREFIX/lib/node_modules

          if test -d $dir/lib/node_modules; then
            cp -fr $dir/lib/node_modules/* $PREFIX/lib/node_modules
          fi
          if [ -f $dir/bin/node-waf ]; then
            cp -f $dir/bin/node-waf $PREFIX/bin/node-waf
          fi
          if [ -d "$dir/lib/node/" ]; then
            cp -fr $dir/lib/node/* $PREFIX/lib/node
          fi
      else
        cp -f $dir/bin/* $PREFIX/bin/
        cp -fr $dir/lib/dtrace $PREFIX/lib/dtrace
        cp -fr $dir/lib/node_modules/* $PREFIX/lib/node_modules
      fi
      if [ -x "$dir/bin/iojs" ]; then
        rm $PREFIX/bin/iojs
        rm $PREFIX/bin/node
        cp $dir/bin/iojs $PREFIX/bin/iojs
        ln -s $PREFIX/bin/iojs $PREFIX/bin/node
      fi
  # install
  else
    local fork="node"
    local tarball="$fork-v$version.tar.gz"
    local logpath="/tmp/n.log"
    if test "$SOURCE_URL" = ""; then
      SOURCE_URL=http://nodejs.org/dist/v$version/$tarball
    fi

    # fetch and unpack
    echo "Fetching: $SOURCE_URL"
    cd $N_PREFIX/n
    $GET "$SOURCE_URL" > $tarball
    if test $? -gt 0; then
        echo "Failed to download tarball, trying a different url"
        SOURCE_URL=http://nodejs.org/dist/$tarball
        echo "Fetching: $SOURCE_URL"
        $GET "$SOURCE_URL" > $tarball
    fi
    if test $? -gt 0; then
        echo "Failed to download tarball, trying a different url"
        fork="iojs"
        tarball="$fork-v$version.tar.gz"
        SOURCE_URL=https://iojs.org/download/release/v$version/$tarball
        echo "Fetching: $SOURCE_URL"
        $GET "$SOURCE_URL" > $tarball
    fi
    wait
    tar -zxf $tarball &> $logpath
    wait ##This was needed for /bin/dash on Ubuntu

    # see if things are alright
    if test $? -gt 0; then
      rm $tarball
      echo "\033[31mError: installation failed\033[0m"
      echo "  node version $version does not exist,"
      echo "  n failed to fetch the tarball,"
      echo "  or tar failed. Try a different"
      echo "  version or view $logpath to view"
      echo "  error details."
      exit 1
    fi

    #Handle Github sub folders.. and fail silently
    mv joyent-node* node-v$version 2> /dev/null
    wait

    cd "$N_PREFIX/n/$fork-v$version" && ./configure --prefix $VERSIONS_DIR/$version $config && make install
    wait ##This was needed for /bin/dash on Ubuntu

    if ! test -n "$VERSIONS_DIR/$version/bin/"; then
      abort "Compile Failed"
    fi

      local sversion=`$VERSIONS_DIR/$version/bin/node --version`
      #Grab the version from the just compiled node
      sversion=${sversion#v}

      if test -z "$sversion"; then
        abort "Something went really wrong"
        return #failure
      fi
      cd .. \
      && cleanup $version \
      && echo $config > "$dir/.config"

      #If the version passed in doesn't match the version just compiled move it around
      if test -n $sversion; then
          if test "$sversion" != "$version"; then
            if test -d "$VERSIONS_DIR/$sversion"; then
                #We have a previous version here, remove it
                rm -rRf "$VERSIONS_DIR/$sversion"
            fi
            mv "$VERSIONS_DIR/$version" "$VERSIONS_DIR/$sversion"
            version=$sversion
          fi
      fi
      n $version

  fi
}

#
# Cleanup after the given <version>
#

cleanup() {
  local version=$1
  local dir="node-v$version"

  if test -d $dir; then
    log "removing source"
    rm -fr $dir
  fi
  
  if test -f "$dir.tar.gz"; then
    log "removing tarball"
    rm -fr "$dir.tar.gz"
  fi
}

#
# Remove <version ...>
#

remove_version() {
  test -z $1 && abort "version(s) required"
  local version=${1#v}
  while test $# -ne 0; do
    rm -rf $VERSIONS_DIR/$version
    shift
  done
}

#
# Output bin path for <version>
#

display_bin_path_for_version() {
  test -z $1 && abort "version required"
  local version=${1#v}
  local bin=$VERSIONS_DIR/$version/bin/node
  if test -f $bin; then
    printf $bin
  else 
    abort "$1 is not installed"
  fi
}

#
# Execute the given <version> of node
# with [args ...]
#

execute_with_version() {
  test -z $1 && abort "version required"
  local version=${2#v};
  shift;shift;
  local bin=$VERSIONS_DIR/$version/bin/node
  if test -f $bin; then
    $bin $@
  else 
    abort "$1 is not installed"
  fi
}

#
# Display the latest node release version.
#

display_latest_version() {
  $GET 2> /dev/null http://nodejs.org/dist/ \
    | egrep -o '[0-9]+\.[0-9]+\.[0-9]+' \
    | sort -u -k 1,1n -k 2,2n -k 3,3n -t . \
    | tail -n1
}

#
# Display the versions of node available.
#

list_versions() {
  check_current_version
  local versions=""
  versions=`$GET 2> /dev/null http://nodejs.org/dist/ \
    | egrep -o '[0-9]+\.[0-9]+\.[0-9]+' \
    | sort -u -k 1,1n -k 2,2n -k 3,3n -t . \
    | awk '{ print "  " $1 }'`

  versions2=`$GET 2> /dev/null https://iojs.org/download/release \
    | egrep -o '[0-9]+\.[0-9]+\.[0-9]+' \
    | sort -u -k 1,1n -k 2,2n -k 3,3n -t . \
    | awk '{ print "  " $1 }'`
  for v in $versions2;
  do
    versions+=" $v"
  done;
  versions=`echo $versions \
    | egrep -o '[0-9]+\.[0-9]+\.[0-9]+' \
    | sort -u -k 1,1n -k 2,2n -k 3,3n -t . \
    | awk '{ print "  " $1 }'`
  for v in $versions;
  do
    if test "$active" = "$v"; then
        echo " \033[32mο\033[0m *$v \033[0m"
    else
      if test -d $VERSIONS_DIR/$v; then
        echo "  \033[32m\033[0m *$v \033[0m"
      else
        echo "    $v"
      fi
    fi
  done
}

# Handle arguments

if test $# -eq 0; then
  display_versions
else
  while test $# -ne 0; do
    case $1 in
      -V|--version) display_n_version ;;
      -h|--help|help) display_help ;;
      --latest) display_latest_version $2; exit ;;
      bin|which) display_bin_path_for_version $2; exit ;;
      as|use) execute_with_version $@; exit ;;
      rm|-) remove_version $2; exit ;;
      latest) install_node `n --latest`; exit ;;
      source) install_source $@; exit ;;
      ls|list) list_versions; exit ;;
      *) install_node $@; exit ;;
    esac
    shift
  done
fi
